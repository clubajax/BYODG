{
  "author": {
    "name": "Mike Wilcox @clubajax"
  },
  "name": "EventTree",
  "main": "EventTree.js",
  "description": "A simple library for emitting events in a browser or in Node.js.",
  "version": "0.0.1",
  "license": "Unlicense",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/clubajax/EventTree.git"
  },
  "readme": "# EventTree\n\n## Description\n\n`EventTree` is a library for emitting events. Its primary feature is it returns a handle, from which\nyou can pause, resume, and remove the event. Handles are much easier to manipulate than using\n`removeEventListener`, or `off` which sometimes necessitates recreating complex or recursive function\nsignatures.\n\nThink of handles as something like a returned Promise - an object with methods, with which you can\ncontrol the event handler.\n\n\t var\n\t\ttree = new EventTree(),\n\t\thandle = tree.on('something-special', function(event){\n\t\t   console.log('special event:', event);\n\t\t});\n\t\n\ttree.emit('something-special', 'event string');\n\thandle.pause(); // event will not fire\n\thandle.resume(); // event fires again\n\thandle.remove(); // event is permanently removed\n\n## Support\n\n`EventTree` supports all browsers and Node.js. IE6 is included and should work with some simple ES5 shims, although\nit has not been tested.\n\nThis library uses UMD, meaning it can be consumed with RequireJS, Browserify or Node.js (CommonJS),\nor a standard browser global.\n\n## Installation\n\nYou can clone the repository with your generic clone commands as a standalone repository or\nsubmodule.\n\n\tgit clone git://github.com/clubajax/EventTree.git\n\nIt is recommended that you set the config.path of RequireJS to make `EventTree` accessible as an\nabsolute path. If using as a global or with Browserify, it is suggested that you use an\n*NPM run script* to copy the `EventTree` script to a location more convenient for your project.\n\t\n`EventTree` has no dependencies.\n\n## Options\n\nEventTree options are all optional. Options can be an object with the following optional options:\n\n\tnew EventTree({\n\t\t// If provided an events object, the key and/or values are used to\n\t\t// ensure a supported event was passed. Used to prevent mis-typed\n\t\t// event names \n\t\tevents:{loading:'tree-loading'},\n\t\t\n\t\t// If a sourceName string is passed, and the emitted event is an object, the EventTree\n\t\t// instance will be added to the event with the key of the sourceName. Useful for discovery\n\t\t// of event origination in event chains and hierarchies\n\t\tsourceName: 'myWidget'\n\t});\n\n## Methods\n\n\ttree.on (name, callback, context, handleId)\n\tKey method for handling events.\n\t\tname: event name\n\t\tcallback: method to invoke when event is captured\n\t\tcontext: optional: An object to bind the callback. Could be \"this\" or \"self\"\n\t\thandleId: An identifier to ad to a series of handles so they can be removed\n\t\t\tall at once via EventTree.removebyId(id);\n\t\treturns: handle (Object)\n\t\t\n\ttree.once (name, callback, context, handleId){\n\t\tAttach a listener that will get called only once.\n\n\ttree.emit (name, event, event, event){\n\t\tKey method used to emit an event.\n\t\t\tname: name of the event\n\t\t\tevent: optional parameter to be passed as the event. Can be any data type (object,\n\t\t\tarray, number, string, etc.)\n\t\t\tadditional events: You may emit more than one argument\n\t\t\t\n\ttree.child (options){\n\t\tMethod for creating a new EventTree instance that is linked in the hierarchy\n\t\toptions: Same options used when creating an instance like new EventTree(options);\n\t\texample:\n\t\t\tparent = new EventTree({sourceName:'A'});\n\t\t\tchild = parent.child({sourceName:'B'});\n\t\t\t\n\t tree.pause\n\t\tPauses all listeners at once. Can be used instead of calling pause on multiple handles.\n\t\texample:\n\t\t\tinstance.pause();\n\n    tree.resume\n\t\tResumes all listeners at once. Can be used instead of calling resume on multiple handles.\n\t\tNote: Will resume *all* active handles, regardless of how or where the handle was paused\n\t\texample:\n\t\t\tinstance.resume();\n\t\n\ttree.dispose\n\t\tUsed to remove all listeners, remove references and destroy the EventTree instance.\n\t\t\n\tEventTree.removeById(handleId)\n\t\tEvent connections can be assigned an ID, and those connections can be removed by ID.\n\t\tSometimes easier than keeping a collection of handles.\n\t\t\n## Features\n\nMultiple `EventTree` instances can be linked together in a hierarchy. Events emitted on low level children will bubble up\nto the top of the tree - but not dowm. So a child event will emit on the child, its parent, and its parent's parent (etc).\nWhen it reaches the top of the tree it will stop. Essentially this means \"cousins\" do not listen to each other's events.\n\n`EventTree` has a `constructor` method, so it is easy to use in inheritance or with Class-construction\nlibraries like [dcl](http://github.com/uhop/dcl).\n\n\tvar\n\t\tevents = {\n\t\t\tbe:'be',\n\t\t\tbop:'bop',\n\t\t\tbaLuLa: 'ba-lu-la'\n\t\t},\n\t\twidget,\n\t\tspy;\n\t\t\n\tfunction Widget(options){\n\t\tthis.constructor(options);\n\t\t\n\t\tthis.load = function(){\n\t\t\tconsole.log('loading!');\n\t\t};\n\t\tthis.on('load', this.load, this);\n\t\t\n\t\tthis.ready = function(){\n\t\t\tthis.emit('load');\t\t\n\t\t};\n\t}\n\t\n\tWidget.prototype = new EventTree();\n\twidget = new Widget({events:events});\n\t\n\twidget.on('bop', function(event){\n\t\tconsole.log('event', event);\n\t});\n\t\n\twidget.ready();\n\t\n",
  "bugs": {
    "url": "https://github.com/clubajax/EventTree/issues"
  },
  "homepage": "https://github.com/clubajax/EventTree",
  "_id": "EventTree@0.0.1",
  "_shasum": "1f390f0fc43f1a7304e97725071bc096b3b41442",
  "_resolved": "git://github.com/clubajax/EventTree.git#9dfdaff18da5778563d2aef596b17b288acd9114",
  "_from": "EventTree@git://github.com/clubajax/EventTree.git"
}
