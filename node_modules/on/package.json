{
  "author": {
    "name": "Mike Wilcox @clubajax"
  },
  "name": "on",
  "main": "on.js",
  "description": "A simple library for handling DOM node events.",
  "version": "0.0.1",
  "license": "Unlicense",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/clubajax/on.git"
  },
  "readme": "# on\n\n## Description\n\n`on` is a simple library for handling DOM node events. Its primary feature is it returns a handle,\nfrom which you can pause, resume, and remove the event. Handles are much easier to manipulate than\nusing `removeEventListener` or jQuery's `off`, which sometimes necessitates recreating sometimes\ncomplex or recursive function signatures.\n\nThink of handles as something like a returned Promise - an object with methods, with which you can\ncontrol the event handler.\n\n\t var handle = on(node, 'click', function(event){\n\t\tconsole.log('click event:', event);\n\t });\n\t handle.pause(); // click event will not fire\n\t handle.resume(); // click event fires again\n\t handle.remove(); // click event is permanently removed\n\nEvents can be handled with any object from which you can attach events.\n\n\ton(window, 'resize', onResize);\n\ton(image, 'load', onImageLoaded);\n\ton(input, 'keydown', onKey);\n\n## Support\n\n`on` supports all modern browsers IE8 and above, and Node.js.\n\nThis library uses UMD, meaning it can be consumed with RequireJS, Browserify (CommonJS),\nor a standard browser global.\n\nNode.js is not supported since this is a DOM-based library.\n\n\n## Installation\n\nYou can clone the repository with your generic clone commands as a standalone repository or\nsubmodule.\n\n\tgit clone git://github.com/clubajax/on.git\n\nIt is recommended that you set the config.path of RequireJS to make `on` accessible as an absolute\npath. If using as a global or with Browserify, it is suggested that you use an *NPM run script* to\ncopy the `on` script to a location more convenient for your project.\n\n`on` has no dependencies.\n\n## Features\n\nWheel Events are normalized to a standard:\n\t\n\tdelta, wheelY, wheelX\n\t\nIt also adds acceleration and deceleration to make Mac and Windows scroll wheels behave similarly.\n\nKeyEvents are standard, except for the addition of the `alphanumeric` property, which adds\nthe actual letter or number pressed to the event, not just the key code.\n\nThere is also a custom `clickoff` event, to detect if you've clicked anywhere in the document\nother than the passed node. Useful for menus and modals.\n\n\t var handle = on(node, 'clickoff', callback);\n\t //  callback fires if something other than node is clicked\n\n There is support for multiple event types at once. The following example is useful for handling\n both desktop mouseovers and tablet clicks:\n\n\t var handle = on(node, 'mouseover,click', onStart);\n\n`on` has an optional context parameter. The fourth argument can be 'this'\n(or some other object) to conveniently avoid the use of var `self = this;`\n\n\t handle1 = on(this.node, 'mousedown', 'onStart', this);\n\t handle2 = on(this.node, 'mousedown', this.onStart, this);\n\n`on.multi` allows for connecting multiple events to a node at the same\ntime.\n\n\t handle = on.multi(document, {\n\t\t \"touchend\":\"onEnd\",\n\t\t \"touchcancel\":\"onEnd\",\n\t\t \"touchmove\":this.method\n\t }, this);\n\n`on` supports an optional ID that can be used to track connections to be\ndisposed later.\n\n\t on(node, 'click', callback, 'uid-a');\n\t on(node, 'mouseover', callback, 'uid-a');\n\t on(otherNode, 'click', callback, 'uid-a');\n\t on(document, 'load', callback, 'uid-a');\n\t on.remove('uid-a');\n\n`on` supports simple selectors, separated from the event by a space:\n\n\t on(node, 'click .tab', callback);\n\t on(node, 'click div', callback);\n\t on(node, 'click #main', callback);\n\t on(node, 'click div[\"data-foo\"=bar]', callback);\n\nNote: to keep the code small and simple, this feature is limited. Use only a single nodeName, ID,\nattribute selector, or single className. Combinations may not work.\n\n## License\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>",
  "bugs": {
    "url": "https://github.com/clubajax/on/issues"
  },
  "homepage": "https://github.com/clubajax/on",
  "_id": "on@0.0.1",
  "_shasum": "6a18a5f422260e84a94eea3b01b5342a8c077f70",
  "_resolved": "git://github.com/clubajax/on.git#4e059363c1ae59f93f25b454cae6096bae4667bb",
  "_from": "on@git://github.com/clubajax/on.git"
}
