{
  "author": {
    "name": "Mike Wilcox @clubajax"
  },
  "name": "dom",
  "main": "dom.js",
  "description": "A simple library for creating, and modifying DOM nodes.",
  "version": "0.0.1",
  "license": "Unlicense",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/clubajax/dom.git"
  },
  "readme": "# dom\n\n## Description\n\n`dom` is a convenience library for common DOM methods. Its primary function is to make it more\nfinger-friendly to create, modify, and delete DOM nodes, and to add and remove styles and attributes.\nThere is some extended functionality as noted in the API docs below.\n\n## Support\n\n`dom` supports modern browsers, IE9 and up. Some modern DOM methods like `classList` are expected.\n\nThis library uses UMD, meaning it can be consumed with RequireJS, Browserify (CommonJS),\nor a standard browser global.\n\n## Installation\n\nYou can clone the repository with your generic clone commands as a standalone repository or\nsubmodule.\n\n\tgit clone git://github.com/clubajax/dom.git\n\nIt is recommended that you set the config.path of RequireJS to make `dom` accessible as an\nabsolute path. If using as a global or with Browserify, it is suggested that you use an\n*NPM run script* to copy the `dom` script to a location more convenient for your project.\n\t\n`dom` has no dependencies.\n\n## Comes with Stub Included!\n\nThe benefit of using `dom` exclusively in your code, is it comes complete with a \"dom stub\",\nwhich can be substituted in Node.js unit tests.\n\nThe stub is as described, a stub, meaning most of the functions are NOOPs. But there are a few\nfunctions that work as mocks, meaning they are functional with dummy/partial data. Simple objects\nare returned as dom nodes, which should result to truthy in tests. These simple objects have an\n`innerHTML` getter/setter so text comparisons can also be done. They also keep track of their\nchildren and parent nodes, so some DOM manipulation can be simulated.\n\nIt is reccomended that the stub/dom.js should be looked over to learn of its full functionality.\n\n## The `dom` function\n\n`dom` is the main function, and has several more functions attached to that function. So you can\ncreate a node with the main function like:\n\n\tdom('div');\n\t\nAnd you could access nodes with the `byId` attached function, like:\n\n\tvar node - dom.byId('my-node');\n\t\n## API\n\n**dom()**\n\nCreates and returns a node.\n\n\nif the first argument is a string and starts with '<', it is assumed to use be an HTML string, and\ncreates a node using innerHTML. Optional second arg is a parentNode.\n\n\tvar node = dom('<div>my dome node</div>', parentNode);\n\t\nif the first argument is a string and does *not* start with '<', it is assumed to be a nodeName,\nand a node is created via `document.createElement()`.\n\n\tvar node = dom('div');\n\t\nAdditional parameters (all optional):\n\nThe second parameter is `options` which is an object that can contain properties or other objects:\n\n\tid: sets the node ID\n\tclassName: Sets the node class\n\tcss: Sets the node class (alias for className)\n\tinnerHTML: Sets the node's innerHTML\n\thtml: Sets the node's innerHTML (alias for innerHTML)\n\tstyle: An object of CSS key-value styles. This object is passed to dom.style()\n\tattr: An object of attribute key-value pairs. This object is passed to dom.attr()\n\nThe third parameter is an node or a node id, where the newly created node will be appended\n\nThe fourth parameter is a boolean. If true, the newly created node will be prepended, not appended.\n\t\n\n**dom.style()**\n        \n`dom.style` is a getter or a setter, depending on the parameters passed.\n\nTo use as a getter, the parameters should be a node, and a string property (only one property can be\naccessed at a time). If the result is in the node.style object, that is returned. If not, the\nproperty is acquired through the window global `getComputedStyle`.\n\nTo use as a setter, add a third parameter as a value:\n\n\tdom.style(node, 'width', 100);\n\nNote that like jQuery, the value did not need to be a string appended with 'px'. If the style is a\ndimensional property, this is done automatically. The dimensional properties are:\n\n\twidth\n\theight\n\ttop\n\tleft\n\tright\n\tbottom\n\tmaxWidth\n\tmax-width\n\tmaxHeight\n\tmax-height\n\nA more common way to use as a setter is to make the second parameter an object:\n\n\tdom.style(node, {\n\t\twidth: 100,\n\t\theight: 100,\n\t\tposition: 'absolute',\n\t\tzIndex: 1\n\t});\n\n**dom.attr()**\n\nSimilar to `dom.style`, `dom.attr` is a getter/setter to get and set attributes on nodes.\n\nAs a getter:\n\n\tvar dataItem = dom.attr(node, 'data-item');\n\t\nAs a setter:\n\n\tdom.attr(node, 'data-item', dataItem);\n\t\nOr multiple attributes:\n\n\tdom.attr(node, {\n\t\t'data-item': dataItem\n\t\tscrollTop: 100,\n\t\tcontentEditable: true\n\t});\n\t\t\n**dom.byId('nodeId')**\n\nIf the parameter is a string, it finds a node with document.getElementByid(). If not found, returns\nnull. If the parameter is an object, it is assumed to already be a node and is returned.\n\nBonus: if it is detected to be a jQuery $element, it \"de-jQuery-ifies\" it, and returns a node.\n\n**dom.box(node)**\n\nReturns the dimensions of the passed node. Mainly an alias for `getBoundingClientRect()`. If the\npassed item in the window object, returns its width and height.\n\n**dom.query('div.myClass')**\n\nAn alias for `document.querySelectorAll`, so the parameter should conform to that. If the result is\none node, returns a node. If the result is multiple nodes, they are returned as an Array and not a\nNodeList.\n\n**dom.destroy(node)**\n\nDestroys a node completely.\n\n**dom.clean(node)**\n\nRemoves (but does not destroy) all child nodes.\n\n**dom.show(node)** and **dom.hide(node)**\n\nThese methods simply add or remove the className \"off\". So by itself it will do little else. Your CSS\nshould ad a \".off\" class that has `display:none`.\n\nThis techinque is more effective than setting `style:display:none`, because it is too difficult to\nreverse. It is not easily known if the node has `display:block` or `display:inline-block` or a table style.\n\n\n**dom.classList**\n\n`dom.classList` is essentially a passthrough for node.classList methods, `add`, `remove`, `toggle`, and\n`contains`.\n\nThere is extended functionality in `add` and `remove`: standard functionality doesn't allow for Arrays or\nstrings with spaces (ergo, two classes at once). `dom.classList` allows for this.\n\n\n## License\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>",
  "bugs": {
    "url": "https://github.com/clubajax/dom/issues"
  },
  "homepage": "https://github.com/clubajax/dom",
  "_id": "dom@0.0.1",
  "_shasum": "98fba07bc5df98447dd25b6638331ee6a1da6abe",
  "_resolved": "git://github.com/clubajax/dom.git#a1a3aa520cb53808e229fadfa08d8bc0849b7de0",
  "_from": "dom@git://github.com/clubajax/dom.git"
}
